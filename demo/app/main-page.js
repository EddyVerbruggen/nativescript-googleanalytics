"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var googleAnalytics = require("nativescript-google-analytics");
var snackbarModule = require("nativescript-snackbar");
var frame_1 = require("tns-core-modules/ui/frame");
var page;
var snackbar = new snackbarModule.SnackBar();
exports.pageLoaded = function (args) {
    debugger;
    page = args.object;
    page.bindingContext = new main_view_model_1.MainViewModel();
    googleAnalytics.logView("Main-Page");
    wireEvents();
};
exports.mainActionTap = function (args) {
    googleAnalytics.logEvent({
        category: "Basic Actions",
        action: "Click",
        label: "Main Button"
    });
    showMessage("Primary Tap");
};
exports.secondaryActionTap = function (args) {
    googleAnalytics.logEvent({
        category: "Basic Actions",
        action: "Click",
        label: "Secondary Button"
    });
    var topmostFrame = frame_1.topmost();
    topmostFrame.navigate("secondary-page");
};
exports.onDispatchQueue = function (args) {
    googleAnalytics.dispatch();
};
function wireEvents() {
    page.getViewById("genstureSwipe").on("swipe", function (args) {
        googleAnalytics.logEvent({
            category: "Gestures",
            action: "Swipe",
            label: "Direction: " + args.direction,
            value: args.direction
        });
        showMessage("Swipe Direction: " + args.direction);
        console.log("Swipe Direction: " + args.direction);
    });
    page.getViewById("genstureLongTap").on("longPress", function (args) {
        googleAnalytics.logEvent({
            category: "Gestures",
            action: "Long Press",
            label: "Long press on screen"
        });
        showMessage("Long Press");
        console.log("Long Press");
    });
}
function showMessage(message) {
    snackbar.simple(message).then(function (args) {
        console.log(JSON.stringify(args));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscURBQWtEO0FBQ2xELElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBRS9ELHNEQUF3RDtBQUN4RCxtREFBMkQ7QUFHM0QsSUFBSSxJQUFXLENBQUM7QUFFaEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFN0MsT0FBTyxDQUFDLFVBQVUsR0FBRyxVQUFVLElBQUk7SUFDL0IsUUFBUSxDQUFDO0lBQ1QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFlLENBQUM7SUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLCtCQUFhLEVBQUUsQ0FBQztJQUUxQyxlQUFlLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBR3JDLFVBQVUsRUFBRSxDQUFDO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE9BQU8sQ0FBQyxhQUFhLEdBQUcsVUFBUyxJQUFJO0lBQ2pDLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFDdkIsUUFBUSxFQUFFLGVBQWU7UUFDekIsTUFBTSxFQUFFLE9BQU87UUFDZixLQUFLLEVBQUUsYUFBYTtLQUNyQixDQUFDLENBQUM7SUFDSCxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFBO0FBRUQsT0FBTyxDQUFDLGtCQUFrQixHQUFHLFVBQVMsSUFBSTtJQUN0QyxlQUFlLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLE1BQU0sRUFBRSxPQUFPO1FBQ2YsS0FBSyxFQUFFLGtCQUFrQjtLQUMxQixDQUFDLENBQUM7SUFFSCxJQUFNLFlBQVksR0FBVSxlQUFPLEVBQUUsQ0FBQztJQUN0QyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFBO0FBRUQsT0FBTyxDQUFDLGVBQWUsR0FBRyxVQUFVLElBQUk7SUFDcEMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9CLENBQUMsQ0FBQTtBQUVEO0lBRUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBMkI7UUFDL0UsZUFBZSxDQUFDLFFBQVEsQ0FBQztZQUNyQixRQUFRLEVBQUUsVUFBVTtZQUNwQixNQUFNLEVBQUUsT0FBTztZQUNmLEtBQUssRUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVM7WUFDckMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQ3hCLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFFSixJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLElBQUk7UUFDN0QsZUFBZSxDQUFDLFFBQVEsQ0FBQztZQUNyQixRQUFRLEVBQUUsVUFBVTtZQUNwQixNQUFNLEVBQUUsWUFBWTtZQUNwQixLQUFLLEVBQUUsc0JBQXNCO1NBQ2hDLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELHFCQUFxQixPQUFPO0lBQ3hCLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSTtRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvblwiO1xuaW1wb3J0IHsgTWFpblZpZXdNb2RlbCB9IGZyb20gXCIuL21haW4tdmlldy1tb2RlbFwiO1xudmFyIGdvb2dsZUFuYWx5dGljcyA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtZ29vZ2xlLWFuYWx5dGljc1wiKTtcbmltcG9ydCB7IEdlc3R1cmVUeXBlcywgU3dpcGVHZXN0dXJlRXZlbnREYXRhIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZ2VzdHVyZXNcIjtcbmltcG9ydCAqIGFzIHNuYWNrYmFyTW9kdWxlIGZyb20gXCJuYXRpdmVzY3JpcHQtc25hY2tiYXJcIjtcbmltcG9ydCB7IEZyYW1lLCB0b3Btb3N0IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWVcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlXCI7XG5cbmxldCBwYWdlOiBGcmFtZTtcblxubGV0IHNuYWNrYmFyID0gbmV3IHNuYWNrYmFyTW9kdWxlLlNuYWNrQmFyKCk7XG5cbmV4cG9ydHMucGFnZUxvYWRlZCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgZGVidWdnZXI7XG4gICAgcGFnZSA9IGFyZ3Mub2JqZWN0IGFzIEZyYW1lO1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBuZXcgTWFpblZpZXdNb2RlbCgpO1xuXG4gICAgZ29vZ2xlQW5hbHl0aWNzLmxvZ1ZpZXcoXCJNYWluLVBhZ2VcIik7XG4gICAgLy9zbmFja2Jhci5zaW1wbGUoXCJMb2dnZWQgdmlldyBvZiBtYWluLXBhZ2VcIik7XG5cbiAgICB3aXJlRXZlbnRzKCk7XG59XG5cbmV4cG9ydHMubWFpbkFjdGlvblRhcCA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICBnb29nbGVBbmFseXRpY3MubG9nRXZlbnQoe1xuICAgICAgY2F0ZWdvcnk6IFwiQmFzaWMgQWN0aW9uc1wiLFxuICAgICAgYWN0aW9uOiBcIkNsaWNrXCIsXG4gICAgICBsYWJlbDogXCJNYWluIEJ1dHRvblwiXG4gICAgfSk7XG4gICAgc2hvd01lc3NhZ2UoXCJQcmltYXJ5IFRhcFwiKTtcbn1cblxuZXhwb3J0cy5zZWNvbmRhcnlBY3Rpb25UYXAgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgZ29vZ2xlQW5hbHl0aWNzLmxvZ0V2ZW50KHtcbiAgICAgIGNhdGVnb3J5OiBcIkJhc2ljIEFjdGlvbnNcIixcbiAgICAgIGFjdGlvbjogXCJDbGlja1wiLFxuICAgICAgbGFiZWw6IFwiU2Vjb25kYXJ5IEJ1dHRvblwiXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgdG9wbW9zdEZyYW1lOiBGcmFtZSA9IHRvcG1vc3QoKTtcbiAgICB0b3Btb3N0RnJhbWUubmF2aWdhdGUoXCJzZWNvbmRhcnktcGFnZVwiKTtcbn1cblxuZXhwb3J0cy5vbkRpc3BhdGNoUXVldWUgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIGdvb2dsZUFuYWx5dGljcy5kaXNwYXRjaCgpO1xufVxuXG5mdW5jdGlvbiB3aXJlRXZlbnRzKCl7XG5cbiAgICBwYWdlLmdldFZpZXdCeUlkKFwiZ2Vuc3R1cmVTd2lwZVwiKS5vbihcInN3aXBlXCIsIGZ1bmN0aW9uIChhcmdzOiBTd2lwZUdlc3R1cmVFdmVudERhdGEpIHtcbiAgICAgICAgZ29vZ2xlQW5hbHl0aWNzLmxvZ0V2ZW50KHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIkdlc3R1cmVzXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiU3dpcGVcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIkRpcmVjdGlvbjogXCIgKyBhcmdzLmRpcmVjdGlvbixcbiAgICAgICAgICAgIHZhbHVlOiBhcmdzLmRpcmVjdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgc2hvd01lc3NhZ2UoXCJTd2lwZSBEaXJlY3Rpb246IFwiICsgYXJncy5kaXJlY3Rpb24pO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlN3aXBlIERpcmVjdGlvbjogXCIgKyBhcmdzLmRpcmVjdGlvbik7XG4gICAgfSk7XG5cbiAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJnZW5zdHVyZUxvbmdUYXBcIikub24oXCJsb25nUHJlc3NcIiwgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgZ29vZ2xlQW5hbHl0aWNzLmxvZ0V2ZW50KHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIkdlc3R1cmVzXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiTG9uZyBQcmVzc1wiLFxuICAgICAgICAgICAgbGFiZWw6IFwiTG9uZyBwcmVzcyBvbiBzY3JlZW5cIlxuICAgICAgICB9KTtcbiAgICAgICAgc2hvd01lc3NhZ2UoXCJMb25nIFByZXNzXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkxvbmcgUHJlc3NcIik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNob3dNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBzbmFja2Jhci5zaW1wbGUobWVzc2FnZSkudGhlbihhcmdzID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYXJncykpO1xuICAgIH0pO1xufSJdfQ==