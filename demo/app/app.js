var application = require("application");
var googleAnalytics = require("nativescript-google-analytics");
application.cssFile = "./app.css";
if (application.ios) {
    var __extends = this.__extends || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        __.prototype = b.prototype;
        d.prototype = new __();
    };
    var appDelegate = (function (_super) {
        __extends(appDelegate, _super);
        function appDelegate() {
            _super.apply(this, arguments);
        }
        appDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
            initAnalytics();
        };
        appDelegate.ObjCProtocols = [UIApplicationDelegate];
        return appDelegate;
    })(UIResponder);
    application.ios.delegate = appDelegate;
}
else {
    application.on(application.launchEvent, function (args) {
        initAnalytics();
    });
}
application.run({ moduleName: "app-root" });
function initAnalytics() {
    googleAnalytics.initalize({
        trackingId: "UA-74227193-1",
        enableDemographics: true,
        dispatchInterval: 5,
        logging: {
            native: true,
            console: true
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QyxJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUMvRCxXQUFXLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUVsQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVsQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDNUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELGdCQUFnQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFFRixJQUFJLFdBQVcsR0FBRyxDQUFDLFVBQVUsTUFBTTtRQUMvQixTQUFTLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9CO1lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDbEMsQ0FBQztRQUVELFdBQVcsQ0FBQyxTQUFTLENBQUMsd0NBQXdDLEdBQUcsVUFBVSxXQUFXLEVBQUUsYUFBYTtZQUNqRyxhQUFhLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUM7UUFFSSxXQUFZLENBQUMsYUFBYSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMzRCxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hCLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztBQUMzQyxDQUFDO0FBQUEsSUFBSSxDQUFBLENBQUM7SUFFRixXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxJQUFJO1FBQ2xELGFBQWEsRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQztBQUVELFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQztBQUUxQztJQUNJLGVBQWUsQ0FBQyxTQUFTLENBQUM7UUFDZCxVQUFVLEVBQUUsZUFBZTtRQUUzQixrQkFBa0IsRUFBRSxJQUFJO1FBQ3hCLGdCQUFnQixFQUFFLENBQUM7UUFDbkIsT0FBTyxFQUFFO1lBQ0wsTUFBTSxFQUFFLElBQUk7WUFDWixPQUFPLEVBQUUsSUFBSTtTQUNoQjtLQUNKLENBQUMsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwbGljYXRpb24gPSByZXF1aXJlKFwiYXBwbGljYXRpb25cIik7XG52YXIgZ29vZ2xlQW5hbHl0aWNzID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1nb29nbGUtYW5hbHl0aWNzXCIpO1xuYXBwbGljYXRpb24uY3NzRmlsZSA9IFwiLi9hcHAuY3NzXCI7XG5cbmlmIChhcHBsaWNhdGlvbi5pb3MpIHtcbiAgICAvL0lPU1xuICAgIHZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgICAgICBkLnByb3RvdHlwZSA9IG5ldyBfXygpO1xuICAgIH07XG5cbiAgICB2YXIgYXBwRGVsZWdhdGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoYXBwRGVsZWdhdGUsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIGFwcERlbGVnYXRlKCkge1xuICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHBEZWxlZ2F0ZS5wcm90b3R5cGUuYXBwbGljYXRpb25EaWRGaW5pc2hMYXVuY2hpbmdXaXRoT3B0aW9ucyA9IGZ1bmN0aW9uIChhcHBsaWNhdGlvbiwgbGF1bmNoT3B0aW9ucykge1xuICAgICAgICAgICAgaW5pdEFuYWx5dGljcygpOyAvL01vZHVsZSBDb2RlIHRvIGluaXRhbGl6ZVxuICAgICAgICB9O1xuXG4gICAgICAgICg8YW55PmFwcERlbGVnYXRlKS5PYmpDUHJvdG9jb2xzID0gW1VJQXBwbGljYXRpb25EZWxlZ2F0ZV07XG4gICAgICAgIHJldHVybiBhcHBEZWxlZ2F0ZTtcbiAgICB9KShVSVJlc3BvbmRlcik7XG4gICAgYXBwbGljYXRpb24uaW9zLmRlbGVnYXRlID0gYXBwRGVsZWdhdGU7XG59ZWxzZXtcbiAgICAvL0FORFJPSURcbiAgICBhcHBsaWNhdGlvbi5vbihhcHBsaWNhdGlvbi5sYXVuY2hFdmVudCwgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgaW5pdEFuYWx5dGljcygpOyAvL01vZHVsZSBDb2RlIHRvIGluaXRhbGl6ZVxuICAgIH0pO1xuXG59XG5cbmFwcGxpY2F0aW9uLnJ1bih7IG1vZHVsZU5hbWU6XCJhcHAtcm9vdFwifSk7XG5cbmZ1bmN0aW9uIGluaXRBbmFseXRpY3MoKXtcbiAgICBnb29nbGVBbmFseXRpY3MuaW5pdGFsaXplKHtcbiAgICAgICAgICAgICAgICB0cmFja2luZ0lkOiBcIlVBLTc0MjI3MTkzLTFcIixcbiAgICAgICAgICAgICAgICAvL3VzZXJJZDogXCI5YWM3YTAzNC1mZmRlLTQ3ODMtODM3NC1mNzhiM2RmMzlkMzJcIiwgLy9PcHRpb25hbFxuICAgICAgICAgICAgICAgIGVuYWJsZURlbW9ncmFwaGljczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEludGVydmFsOiA1LFxuICAgICAgICAgICAgICAgIGxvZ2dpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG59XG4iXX0=